#!/usr/bin/python
import pymysql.cursors, json, argparse, random, string, os
from tabulate import tabulate

count=0
temp_file = None

parser = argparse.ArgumentParser(description='Check a text file against a database of BNP Members. If you only have one name then check manually. This tool will never be as good as a human at matching names.')
parser.add_argument('--file', type=str, default="members.txt", help='The list of names to check against the BNP dataset. Should be one name per line. Format is assumed to be <first_name> <middle name> <last name>. Middle names is optional and is ignored in the check. If an extact match is not found we perform an initial check with the first name and last name. This is indicated in the output')
parser.add_argument('--host', type=str, default="localhost", help="MySQL hostname")
parser.add_argument('--username', type=str, default="root", help="MySQL username")
parser.add_argument('--password', type=str, default="secret", help="MySQL password")
parser.add_argument('--db', type=str, default="bnp", help="MySQL database")
parser.add_argument('--table', type=str, default="members", help="MySQL table")
parser.add_argument('--tablefmt', type=str, default="simple", help="Output table format")
parser.add_argument('--fulltext', action='store_true', default=False, help="Perform an additional fulltext search on the dataset")
parser.add_argument('--text', type=str, default="resigned", help="Text to use with the fulltext search feature. Useful for adhoc searching of the dataset.")
parser.add_argument('--json', type=str, help="JSON file containing a list of dictionaries to check against the BNP member database. See README for format details.")
parser.add_argument('--debug', action='store_true', default=False, help="Output debugging information")
args = parser.parse_args()

# Connect to the database
connection = pymysql.connect(host=args.host,
							 user=args.username,
							 password=args.password,
							 db=args.db,
							 cursorclass=pymysql.cursors.DictCursor)
result = []
table_formats = [ "plain",
				  "simple",
				  "grid",
				  "fancy_grid",
				  "pipe",
				  "orgtbl",
				  "jira",
				  "presto",
				  "psql",
				  "rst",
				  "mediawiki",
				  "moinmoin",
				  "youtrack",
				  "html",
				  "latex",
				  "latex_raw",
				  "latex_booktabs",
				  "textile" ]

def randomword(length):
   return ''.join(random.choice(string.lowercase) for i in range(length))

def generate_list_from_json(json_file, temp_file):
	data = json.load(open(json_file))
	for dictionary in data:
		try:
			with open(temp_file, "a") as myfile:
				myfile.write(dictionary["name"].encode('utf-8').strip() + "\n")
		except Exception as excep:
			if args.debug:
				print("Current dictionary: {0}".format(dicitonary))
			raise excep

try:

	if args.json is not None:
		temp_file = "/tmp/bnp_temp_{0}".format(randomword(10))
		generate_list_from_json(args.json, temp_file)
		args.file = temp_file

	with connection.cursor() as cursor:
		fp = open(args.file, 'r')
		line = fp.readline()
		while line:
			try:
				first_name, last_name = line.strip().split(" ")
			except ValueError as excep:
				# Try again with middle name
				try:
					first_name, middle_name, last_name = line.strip().split(" ")
				except ValueError as excep:
					print("ValueError on {0}".format(line))
				# Read a single record
			last_name = last_name.replace("'", "\\'")
			sql = "SELECT *, 'exact' AS match_type, '{0} {1}' AS check_data FROM {2} WHERE `first_name`=%s AND last_name=%s".format(first_name, last_name, args.table)
			cursor.execute(sql, (first_name, last_name))
			# Try First Initial if no match
			if cursor.rowcount > 0:
				result += cursor.fetchall()
			else:
				initial = first_name[0]
				sql = "SELECT *, 'initial' AS match_type, '{0} {1}' AS check_data FROM {2} WHERE first_name = '{3}.' AND CHAR_LENGTH(first_name) <=2 AND last_name='{4}'".format(initial, last_name, args.table, initial, last_name)
				cursor.execute(sql)
				result += cursor.fetchall()
			count += 1
			if count % 10 == 0:
				print("Processed {0} rows".format(count));
			line = fp.readline()
		if args.fulltext:
			sql = "SELECT *, 'fulltext' AS match_type, '{0}' AS check_data, MATCH(first_name, last_name, other) AGAINST ('{1}' IN NATURAL LANGUAGE MODE) AS score FROM {2} ORDER BY score DESC LIMIT 1".format(args.text, args.text, args.table)
			cursor.execute(sql)
			result += cursor.fetchall()
finally:
	# Clean up
	connection.close()
	if temp_file is not None:
		pass
		#os.remove(temp_file)

if result is not None:
	headers = {}
	for item in result[0].keys():
		headers[item] = item
	print(tabulate(result, headers, tablefmt=args.tablefmt))
else:
	print("No matches found in {0}".format(args.file))
